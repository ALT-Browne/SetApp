@using SetApp.Models
@page "/setsolo"

<PageTitle>Set Solo</PageTitle>

@if (showRules)
{
        <div class="set-rules">
        <p>A game of Set consists of 81 unique cards that vary in four characteristics across three values for each
                kind: number of shapes (one, two, or three), shape (diamond, squiggle, oval), shading (solid, striped,
                or open), and color (red, green, or purple). Each possible combination of characteristics (e.g. a card
                with three striped green diamonds) appears as a card precisely once in the deck.</p>

        <p>To play, you must find certain combinations of three cards which make a "set". This means that for each of
                the four characteristics (colour, number, shape, and shading) the three cards must display either a) all
                the same value, or b) all different values. In other words, for each characteristic the three cards must
                avoid having two cards with equal value and the third card showing a different value.</p>

        <p>For example, 3 solid red diamonds, 2 solid green squiggles, and 1 solid purple oval form a set, because the
                shadings of the three cards are all the same, while the numbers, the colors, and the shapes among the
                three cards are all different.</p>

        <p>Try and find a set in the current hand by selecting the cards and clicking "Check Set". If you are correct
                then those cards are removed from the game (and replaced if there are 12 or fewer in the current hand
                and there are cards left in the deck). Sometimes there will be no set possible, at which point you may
                click "Deal More Cards" to get more. There is also a hint button if you are stuck. Keep going until the
                cards run out!</p>
</div>
}

<SetBoard Board=@game.CurrentBoard Clickable=@true ResetMessages=@ResetMessages />
<SetSoloMoveHistory BoardHistory=@game.BoardHistory JumpToMove=@JumpToMove ResetMessages=@ResetMessages
        UnselectCards=@UnselectCards />
<div class="buttons-container">
        <button @onclick="@(() => RestartGame())">Restart</button>
        <div class="button-message-container">
                <button @onclick="@(() => HandleHint())">Hint</button>
                <div class="message">
                        @(game.HintMessage)
                </div>
        </div>
        <div class="button-message-container">
                <button @onclick="@(() => HandleCheckSet())">Check Set</button>
                <div class="message">
                        @(game.CheckSetMessage)
                </div>
        </div>
        <div class="button-message-container">
                <button @onclick="@(() => HandleDealMoreCards(3))">Deal More
                        Cards</button>
                <div class="message">
                        @(game.DealMoreCardsMessage)
                </div>
        </div>
        <div class="button-message-container">
                <button @onclick="@(() => ToggleShowRules())">Rules</button>
        </div>
</div>

<div class="sets-found-container">
        <label>@(game.CurrentSetsFound.Count == 1 ? game.CurrentSetsFound.Count + " set found:" :
                     game.CurrentSetsFound.Count + " sets found:")</label>
        <div class="sets-found">
                @foreach (var tuple in game.CurrentSetsFound)
                {
                        <div class="set-found">
                                <img src="@("images/" + tuple.Item1.ImageString + ".png")" class="image" />
                                <img src="@("images/" + tuple.Item2.ImageString + ".png")" class="image" />
                                <img src="@("images/" + tuple.Item3.ImageString + ".png")" class="image" />
                        </div>
                }
        </div>
</div>

@code {
        private Game game = new Game(false);
        private bool showRules = false;
        private void RestartGame()
        {
                game = new Game(false);
                showRules = false;
        }

        private void JumpToMove(int moveNum)
        {
                game.CurrentMove = moveNum;
        }

        private void ToggleShowRules()
        {
                showRules = !showRules;
        }

        private void UnselectCards(int num)
        {
                game.CurrentBoard.Cards.ForEach(card => card.Selected = false);
        }

        private void ResetMessages(int num)
        {
                game.CheckSetMessage = "";
                game.HintMessage = "";
                game.DealMoreCardsMessage = "";
        }

        private void HandleHint()
        {
                game.GiveHint(false);
        }

        private void HandleCheckSet()
        {
                game.CheckSet(false);
        }

        private void HandleDealMoreCards(int numCards)
        {
                game.HintMessage = "";
                game.DealMoreCardsMessage = "";
                game.CheckSetMessage = "";
                if (game.CurrentBoard.Sets.Count == 0)
                {
                        game.AddCards(numCards);
                }
                else
                {
                        game.DealMoreCardsMessage = "There is at least one set available.";
                }
        }
}
